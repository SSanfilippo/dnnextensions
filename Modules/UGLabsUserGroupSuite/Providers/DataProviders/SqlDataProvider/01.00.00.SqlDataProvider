/*

INSTALL SQL PROVIDER SCRIPT

UG Labs: User Group Suite Module
Version: 01.00.00
Author: Will Strohl
E-Mail: will.strohl@gmail.com
Website: http://www.willstrohl.com

Copyright 2016 Will Strohl

Release Notes:
 This is the first install script for the module. It creates the initial module 
 structure.

*/


/*

BEGIN FOREIGN KEY CLEANUP

*/

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_TermID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_TermID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_SpeakerID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_SpeakerID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_MeetingID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_MeetingID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Keyword_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Keyword')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Keyword] DROP CONSTRAINT [FK_{objectQualifier}UG_Keyword_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SpeakerMeeting_SpeakerID' 
    AND TABLE_NAME = N'{objectQualifier}UG_SpeakerMeeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] DROP CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_SpeakerID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SpeakerMeeting_MeetingID' 
    AND TABLE_NAME = N'{objectQualifier}UG_SpeakerMeeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] DROP CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_MeetingID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SpeakerMeeting_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_SpeakerMeeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] DROP CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SpeakerMeeting_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_SpeakerMeeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] DROP CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Attendance_MeetingID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Attendance')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Attendance] DROP CONSTRAINT [FK_{objectQualifier}UG_Attendance_MeetingID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Attendance_MemberID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Attendance')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Attendance] DROP CONSTRAINT [FK_{objectQualifier}UG_Attendance_MemberID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Attendance_MemberID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Attendance')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Attendance] DROP CONSTRAINT [FK_{objectQualifier}UG_Attendance_MemberID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Attendance_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Attendance')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Attendance] DROP CONSTRAINT [FK_{objectQualifier}UG_Attendance_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Material_MeetingID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Material')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Material] DROP CONSTRAINT [FK_{objectQualifier}UG_Material_MeetingID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Material_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Material')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Material] DROP CONSTRAINT [FK_{objectQualifier}UG_Material_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Material_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Material')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Material] DROP CONSTRAINT [FK_{objectQualifier}UG_Material_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_MemberID' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_MemberID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_MeetingID' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_MeetingID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_MemberActivity_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_MemberActivity')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] DROP CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_PhysicalAddressID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_PhysicalAddressID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_VirtualAddressID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_VirtualAddressID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Meeting_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Meeting')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Meeting] DROP CONSTRAINT [FK_{objectQualifier}UG_Meeting_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Speaker_UserID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Speaker')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Speaker] DROP CONSTRAINT [FK_{objectQualifier}UG_Speaker_UserID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Speaker_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Speaker')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Speaker] DROP CONSTRAINT [FK_{objectQualifier}UG_Speaker_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Speaker_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Speaker')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Speaker] DROP CONSTRAINT [FK_{objectQualifier}UG_Speaker_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_VirtualAddress_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_VirtualAddress')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_VirtualAddress] DROP CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_VirtualAddress_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_VirtualAddress')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_VirtualAddress] DROP CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_VirtualAddress_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_VirtualAddress')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_VirtualAddress] DROP CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Address_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Address')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Address] DROP CONSTRAINT [FK_{objectQualifier}UG_Address_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Address_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Address')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Address] DROP CONSTRAINT [FK_{objectQualifier}UG_Address_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Address_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Address')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Address] DROP CONSTRAINT [FK_{objectQualifier}UG_Address_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Leader_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Leader')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Leader] DROP CONSTRAINT [FK_{objectQualifier}UG_Leader_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Leader_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Leader')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Leader] DROP CONSTRAINT [FK_{objectQualifier}UG_Leader_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Leader_MemberID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Leader')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Leader] DROP CONSTRAINT [FK_{objectQualifier}UG_Leader_MemberID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Leader_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Leader')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Leader] DROP CONSTRAINT [FK_{objectQualifier}UG_Leader_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Leader_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Leader')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Leader] DROP CONSTRAINT [FK_{objectQualifier}UG_Leader_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Member_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Member')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Member] DROP CONSTRAINT [FK_{objectQualifier}UG_Member_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Member_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Member')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Member] DROP CONSTRAINT [FK_{objectQualifier}UG_Member_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Member_UserID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Member')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Member] DROP CONSTRAINT [FK_{objectQualifier}UG_Member_UserID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Member_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Member')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Member] DROP CONSTRAINT [FK_{objectQualifier}UG_Member_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Member_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Member')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Member] DROP CONSTRAINT [FK_{objectQualifier}UG_Member_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SocialSite_GroupID' 
    AND TABLE_NAME = N'{objectQualifier}UG_SocialSite')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SocialSite] DROP CONSTRAINT [FK_{objectQualifier}UG_SocialSite_GroupID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SocialSite_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_SocialSite')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SocialSite] DROP CONSTRAINT [FK_{objectQualifier}UG_SocialSite_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_SocialSite_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_SocialSite')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_SocialSite] DROP CONSTRAINT [FK_{objectQualifier}UG_SocialSite_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Group_ModuleID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Group')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Group] DROP CONSTRAINT [FK_{objectQualifier}UG_Group_ModuleID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Group_LanguageID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Group')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Group] DROP CONSTRAINT [FK_{objectQualifier}UG_Group_LanguageID];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Group_CreatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Group')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Group] DROP CONSTRAINT [FK_{objectQualifier}UG_Group_CreatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Group_LastUpdatedBy' 
    AND TABLE_NAME = N'{objectQualifier}UG_Group')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Group] DROP CONSTRAINT [FK_{objectQualifier}UG_Group_LastUpdatedBy];
GO

IF EXISTS (SELECT 1 
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = N'FK_{objectQualifier}UG_Language_PortalID' 
    AND TABLE_NAME = N'{objectQualifier}UG_Language')
    ALTER TABLE {databaseOwner}[{objectQualifier}UG_Language] DROP CONSTRAINT [FK_{objectQualifier}UG_Language_PortalID];
GO


/*

BEGIN TABLE CREATION

*/

IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Language]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Language];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Language] (
    [GroupLanguageID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Language] PRIMARY KEY CLUSTERED, 
	[Language] NVARCHAR(50) NOT NULL,
    [PortalID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Language_PortalID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalId]) ON DELETE CASCADE
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Language_GroupLanguageID_PortalID] ON {databaseOwner}[{objectQualifier}UG_Language] ([GroupLanguageID],[PortalID]);
GO

IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Group]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Group];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Group] (
    [GroupId] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Group] PRIMARY KEY CLUSTERED, 
    [ModuleId] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Group_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId]) ON DELETE CASCADE, 
    [GroupName] NVARCHAR(50) NOT NULL, 
    [CountryID] INT NOT NULL, 
    [RegionID] INT NULL, 
    [City] NVARCHAR(100) NOT NULL, 
    [LanguageID] INT NOT NULL
		CONSTRAINT [FK_{objectQualifier}UG_Group_LanguageID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Language] ([GroupLanguageID]) ON DELETE CASCADE, 
    [Description] NVARCHAR(500) NOT NULL, 
    [Website] NVARCHAR(255) NULL, 
    [Avatar] NVARCHAR(20) NULL, 
    [IsActive] BIT NOT NULL 
        CONSTRAINT [DF_{objectQualifier}UG_Group_IsActive] DEFAULT((0)), 
    [Slug] NVARCHAR(255) NOT NULL, 
	[CustomProperties] NVARCHAR(MAX) NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Group_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
	[LastUpdatedType] INT NOT NULL
        CONSTRAINT [DF_{objectQualifier}UG_Group_LastUpdatedType] DEFAULT((0)), 
    [LastUpdatedOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Group_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_ModuleID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([ModuleId],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_GroupID_ModuleID] ON {databaseOwner}[{objectQualifier}UG_Group] ([GroupID],[ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_GroupID_ModuleID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([GroupID],[ModuleID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_CountryID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([CountryID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_RegionID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([RegionID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_CountryID_RegionID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([CountryID],[RegionID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_CountryID_RegionID_City_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([CountryID],[RegionID],[City],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Group_CountryID_City_IsActive] ON {databaseOwner}[{objectQualifier}UG_Group] ([CountryID],[City],[IsActive]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_SocialSite]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_SocialSite];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_SocialSite] (
    [GroupSocialSiteID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_SocialSite] PRIMARY KEY CLUSTERED, 
    [GroupID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_SocialSite_GroupID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]) ON DELETE CASCADE, 
    [SocialID] INT NOT NULL, 
    [SocialSiteURL] NVARCHAR(255) NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_SocialSite_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_SocialSite_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SocialSite_GroupSocialSiteID_GroupID] ON {databaseOwner}[{objectQualifier}UG_SocialSite] ([GroupSocialSiteID],[GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SocialSite_GroupID] ON {databaseOwner}[{objectQualifier}UG_SocialSite] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SocialSite_SocialID] ON {databaseOwner}[{objectQualifier}UG_SocialSite] ([SocialID]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Member]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Member];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Member] (
    [MemberID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Member] PRIMARY KEY CLUSTERED, 
    [GroupId] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Member_GroupID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]),
    [ModuleId] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Member_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]),
    [UserID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Member_UserID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE, 
    [ActivityScore] INT NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Member_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Member_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Member_MemberID_UserID] ON {databaseOwner}[{objectQualifier}UG_Member] ([MemberID],[UserID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Member_GroupID] ON {databaseOwner}[{objectQualifier}UG_Member] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Member_UserID] ON {databaseOwner}[{objectQualifier}UG_Member] ([UserID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Member_GroupID_ActivityScore] ON {databaseOwner}[{objectQualifier}UG_Member] ([GroupID],[ActivityScore]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Leader]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Leader];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Leader] (
    [GroupLeaderID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Leader] PRIMARY KEY CLUSTERED, 
    [GroupID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Leader_GroupID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]) ON DELETE CASCADE, 
    [ModuleID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Leader_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]), 
    [MemberID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Leader_MemberID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Member] ([MemberID]) ON DELETE CASCADE, 
    [Title] NVARCHAR(50) NOT NULL, 
    [IsPrimary] BIT NOT NULL 
        CONSTRAINT [DF_{objectQualifier}UG_Leader_IsPrimary] DEFAULT((0)),
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Leader_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Leader_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_GroupLeaderID_GroupID] ON {databaseOwner}[{objectQualifier}UG_Leader] ([GroupLeaderID],[GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_GroupID] ON {databaseOwner}[{objectQualifier}UG_Leader] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_GroupID_IsPrimary] ON {databaseOwner}[{objectQualifier}UG_Leader] ([GroupID],[IsPrimary]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_GroupID_Title] ON {databaseOwner}[{objectQualifier}UG_Leader] ([GroupID],[Title]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_GroupID_IsPrimary_Title] ON {databaseOwner}[{objectQualifier}UG_Leader] ([GroupID],[IsPrimary],[Title]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Leader_MemberID] ON {databaseOwner}[{objectQualifier}UG_Leader] ([MemberID]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Address]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Address];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Address] (
    [AddressID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Address] PRIMARY KEY CLUSTERED,
	[ModuleID] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Address_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId]) ON DELETE CASCADE, 
    [Nickname] NVARCHAR(50) NOT NULL, 
    [Line1] NVARCHAR(200) NOT NULL, 
    [Line2] NVARCHAR(200) NULL, 
    [City] NVARCHAR(100) NOT NULL, 
    [RegionID] INT NULL, 
    [CountryID] INT NOT NULL, 
    [PostalCode] NVARCHAR(20) NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Address_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Address_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_ModuleID] ON {databaseOwner}[{objectQualifier}UG_Address] ([ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_AddressID_ModuleID] ON {databaseOwner}[{objectQualifier}UG_Address] ([AddressID],[ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_Nickname] ON {databaseOwner}[{objectQualifier}UG_Address] ([Nickname]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_AddressID_Nickname] ON {databaseOwner}[{objectQualifier}UG_Address] ([AddressID],[Nickname]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_CountryID] ON {databaseOwner}[{objectQualifier}UG_Address] ([CountryID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_RegionID] ON {databaseOwner}[{objectQualifier}UG_Address] ([RegionID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_CountryID_RegionID] ON {databaseOwner}[{objectQualifier}UG_Address] ([CountryID],[RegionID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_CountryID_City] ON {databaseOwner}[{objectQualifier}UG_Address] ([CountryID],[City]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Address_CountryID_RegionID_City] ON {databaseOwner}[{objectQualifier}UG_Address] ([CountryID],[RegionID],[City]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_VirtualAddress]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_VirtualAddress];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_VirtualAddress] (
    [AddressID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_VirtualAddress] PRIMARY KEY CLUSTERED, 
	[ModuleID] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId]) ON DELETE CASCADE,
    [AddressType] INT NOT NULL
		CONSTRAINT [DF_{objectQualifier}UG_VirtualAddress_AddressType] DEFAULT((0)), 
    [Description] NVARCHAR(MAX) NOT NULL, 
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_VirtualAddress_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_VirtualAddress_AddressID_ModuleID] ON {databaseOwner}[{objectQualifier}UG_VirtualAddress] ([AddressID],[ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_VirtualAddress_ModuleID] ON {databaseOwner}[{objectQualifier}UG_VirtualAddress] ([ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_VirtualAddress_AddressType] ON {databaseOwner}[{objectQualifier}UG_VirtualAddress] ([AddressType]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_VirtualAddress_AddressID_AddressType] ON {databaseOwner}[{objectQualifier}UG_VirtualAddress] ([AddressID],[AddressType]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Speaker]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Speaker];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Speaker] (
    [SpeakerID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Speaker] PRIMARY KEY CLUSTERED, 
    [UserID] INT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Speaker_UserID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE, 
    [SpeakerName] NVARCHAR(150) NOT NULL, 
    [Website] NVARCHAR(255) NULL,
    [Bio] NVARCHAR(MAX) NULL,
	[Email] NVARCHAR(255) NULL,
	[Avatar] NVARCHAR(50) NULL,
	[TravelPreference] INT NOT NULL
		CONSTRAINT [DF_{objectQualifier}UG_Speaker_TravelPreference] DEFAULT((0)),
	[Slug] NVARCHAR(100) NOT NULL,
	[CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Speaker_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Speaker_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Speaker_SpeakerID_UserID] ON {databaseOwner}[{objectQualifier}UG_Speaker] ([SpeakerID],[UserID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Speaker_UserID] ON {databaseOwner}[{objectQualifier}UG_Speaker] ([UserID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Speaker_SpeakerName] ON {databaseOwner}[{objectQualifier}UG_Speaker] ([SpeakerName]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Speaker_Email] ON {databaseOwner}[{objectQualifier}UG_Speaker] ([Email]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Meeting]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Meeting];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Meeting] (
	[MeetingID] INT IDENTITY(1,1) 
		CONSTRAINT [PK_{objectQualifier}UG_Meeting] PRIMARY KEY CLUSTERED, 
	[GroupID] INT NOT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Meeting_GroupID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]) ON DELETE CASCADE, 
	[ModuleID] INT NOT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Meeting_ModuleID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]), 
	[Title] NVARCHAR(150) NOT NULL, 
	[Description] NVARCHAR(500) NOT NULL, 
	[HeldOn] DATETIME NOT NULL, 
	[PhysicalAddressID] INT NULL
		CONSTRAINT [FK_{objectQualifier}UG_Meeting_PhysicalAddressID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Address] ([AddressID]), 
	[VirtualAddressID] INT NULL
		CONSTRAINT [FK_{objectQualifier}UG_Meeting_VirtualAddressID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_VirtualAddress] ([AddressID]), 
	[IsActive] BIT NOT NULL 
		CONSTRAINT [DF_{objectQualifier}UG_Meeting_IsActive] DEFAULT((0)), 
	[Slug] NVARCHAR(255) NOT NULL, 
	[CustomProperties] NVARCHAR(MAX) NULL,
	[CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Meeting_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Meeting_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_MeetingID_GroupID] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID],[GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_HeldOn] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[HeldOn]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_HeldOn_IsActive] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[HeldOn],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_PhysicalAddressID] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[PhysicalAddressID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_PhysicalAddressID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[PhysicalAddressID],[IsActive]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_VirtualAddressID] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[VirtualAddressID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Meeting_GroupID_VirtualAddressID_IsActive] ON {databaseOwner}[{objectQualifier}UG_Meeting] ([GroupID],[VirtualAddressID],[IsActive]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_MemberActivity]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_MemberActivity] (
    [ActivityID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_MemberActivity] PRIMARY KEY CLUSTERED, 
    [ModuleID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE,
    [MemberID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_MemberID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Member] ([MemberID]),
    [GroupID] INT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_GroupID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]), 
    [MeetingID] INT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_MeetingID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID]), 
    [ActivityType] NVARCHAR(20) NOT NULL, 
    [Score] INT NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_MemberActivity_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_ActivityID_MemberID] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([ActivityID],[MemberID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MemberID] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MemberID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_GroupID] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MeetingID] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_ActivityType] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([ActivityType]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MemberID_ActivityType] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MemberID],[ActivityType]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_GroupID_ActivityType] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([GroupID],[ActivityType]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MeetingID_ActivityType] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MeetingID],[ActivityType]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MemberID_Score] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MemberID],[Score]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_GroupID_Score] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([GroupID],[Score]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_MemberActivity_MeetingID_Score] ON {databaseOwner}[{objectQualifier}UG_MemberActivity] ([MeetingID],[Score]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Material]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Material];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Material] (
    [MaterialID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_Material] PRIMARY KEY CLUSTERED, 
    [MeetingID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Material_MeetingID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID]) ON DELETE CASCADE, 
    [Title] NVARCHAR(50) NOT NULL, 
    [Description] NVARCHAR(200) NOT NULL, 
    [Source] NVARCHAR(255) NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Material_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Material_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Material_MaterialID_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Material] ([MaterialID],[MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Material_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Material] ([MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Material_MeetingID_Title] ON {databaseOwner}[{objectQualifier}UG_Material] ([MeetingID],[Title]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Attendance]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Attendance];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Attendance] (
	[AttendanceID] INT IDENTITY(1,1) 
		CONSTRAINT [PK_{objectQualifier}UG_Attendance] PRIMARY KEY CLUSTERED, 
	[MeetingID] INT NOT NULL
		CONSTRAINT [FK_{objectQualifier}UG_Attendance_MeetingID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID]), 
	[MemberID] INT NOT NULL
		CONSTRAINT [FK_{objectQualifier}UG_Attendance_MemberID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Member] ([MemberID]), 
	[AttendanceIntent] INT NOT NULL
		CONSTRAINT [DF_{objectQualifier}UG_Attendance_AttendanceIntent] DEFAULT ((99)),
	[AttendOnline] BIT NOT NULL 
		CONSTRAINT [DF_{objectQualifier}UG_Attendance_AttendOnline] DEFAULT((0)),
	[AttendInPerson] BIT NOT NULL 
		CONSTRAINT [DF_{objectQualifier}UG_Attendance_AttendInPerson] DEFAULT((0)),
	[Attended] BIT NOT NULL 
		CONSTRAINT [DF_{objectQualifier}UG_Attendance_Attended] DEFAULT((0)),
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Attendance_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Attendance_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_AttendanceID_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([AttendanceID],[MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_MemberID] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([MemberID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_AttendOnline] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([MeetingID],[AttendOnline]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_AttendInPerson] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([MeetingID],[AttendInPerson]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Attendance_Attended] ON {databaseOwner}[{objectQualifier}UG_Attendance] ([MeetingID],[Attended]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_SpeakerMeeting]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] (
    [SpeakerMeetingID] INT IDENTITY(1,1) 
        CONSTRAINT [PK_{objectQualifier}UG_SpeakerMeeting] PRIMARY KEY CLUSTERED, 
    [SpeakerID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_SpeakerID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Speaker] ([SpeakerID]), 
    [MeetingID] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_MeetingID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID]),
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_SpeakerMeeting_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SpeakerMeeting_SpeakerMeetingID_SpeakerID] ON {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] ([SpeakerMeetingID],[SpeakerID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SpeakerMeeting_SpeakerID] ON {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] ([SpeakerID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SpeakerMeeting_MeetingID] ON {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] ([MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_SpeakerMeeting_SpeakerID_MeetingID] ON {databaseOwner}[{objectQualifier}UG_SpeakerMeeting] ([SpeakerID],[MeetingID]);
GO


IF NOT OBJECT_ID('{databaseOwner}[{objectQualifier}UG_Keyword]') IS NULL
    DROP TABLE {databaseOwner}[{objectQualifier}UG_Keyword];
GO

CREATE TABLE {databaseOwner}[{objectQualifier}UG_Keyword] (
	[KeywordId] INT IDENTITY(1,1) 
		CONSTRAINT [PK_{objectQualifier}UG_Keyword] PRIMARY KEY CLUSTERED, 
    [ModuleId] INT NOT NULL 
        CONSTRAINT [FK_{objectQualifier}UG_Keyword_ModuleID] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId]) ON DELETE CASCADE,
	[TermID] INT NOT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Keyword_TermID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_Terms] ([TermID]), 
	[GroupID] INT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Keyword_GroupID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Group] ([GroupID]),
	[MeetingID] INT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Keyword_MeetingID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Meeting] ([MeetingID]),
	[SpeakerID] INT NULL 
		CONSTRAINT [FK_{objectQualifier}UG_Keyword_SpeakerID] FOREIGN KEY 
		REFERENCES {databaseOwner}[{objectQualifier}UG_Speaker] ([SpeakerID]),
    [CreatedOn] DATETIME NOT NULL,
    [CreatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Keyword_CreatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId]),
    [LastUpdatedByOn] DATETIME NOT NULL,
    [LastUpdatedBy] INT NOT NULL
        CONSTRAINT [FK_{objectQualifier}UG_Keyword_LastUpdatedBy] FOREIGN KEY 
        REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_KeywordID_ModuleID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([KeywordID],[ModuleID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_TermID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([TermID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_GroupID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_TermID_GroupID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([TermID],[GroupID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_TermID_MeetingID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([TermID],[MeetingID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_SpeakerID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([SpeakerID]);
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UG_Keyword_TermID_SpeakerID] ON {databaseOwner}[{objectQualifier}UG_Keyword] ([TermID],[SpeakerID]);
GO

/*

BEGIN STORED PROCEDURES CREATION

*/

IF NOT OBJECT_ID(N'{databaseOwner}[{objectQualifier}UG_GetGroupsWithUpcomingMeetings]') IS NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UG_GetGroupsWithUpcomingMeetings];
GO

SET QUOTED_IDENTIFIER ON; 
GO
SET ANSI_NULLS ON; 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UG_GetGroupsWithUpcomingMeetings] 
AS 
BEGIN 
	SET NOCOUNT ON;
	SELECT g.* 
	FROM {databaseOwner}[{objectQualifier}UG_Group] g 
	WHERE g.[GroupID] IN (
		SELECT DISTINCT m.[GroupID] 
		FROM {databaseOwner}[{objectQualifier}UG_Meeting] m 
		WHERE m.[HeldOn] > GETDATE()
	);
END
GO

/*

END OF FILE

*/